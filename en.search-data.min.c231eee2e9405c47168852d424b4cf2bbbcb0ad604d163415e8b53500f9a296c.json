[{"id":0,"href":"/docs/first_one/","title":"About Me","section":"Docs","content":" Greetings! ðŸ‘‹ # Introduction # Greetings, I\u0026rsquo;m Harpreet Singh, a Computer Science major at IIITH, finished my third semester. Having recently completed courses like CS3.301 (Operating Systems and Networks) and CS1.302 (Automata Theory), I find myself intrigued by the practical applications of Computer Science. Witnessing theories come to life in computer systems and algorithms has been truly captivating.\nWhat to Expect. # As someone with dynamic interests, my focus shifts based on current happenings. Primarily, my curiosity centers around the developments in the field of computer science. So this is a place where I would not only share algorithms and data structure problems but also research articles in the tech domain. Rest assured, these articles won\u0026rsquo;t be your typical run-of-the-mill readsâ€”they\u0026rsquo;re designed to captivate and inspire ðŸ˜‰.\nRoad Ahead # It\u0026rsquo;s just the beginning, and I would keep updating my daily learnings, challenges, and discoveries regularly. I hope that, in turn, you find something new and interesting with each visit. I won\u0026rsquo;t fail the people who give their extremely valuable time and attention on this page!\nThank you for stopping by, see you on the first post!\n#StayCurious ðŸš€\n"},{"id":1,"href":"/docs/lc/getsum/","title":"371. Sum of Two Integers","section":"Leetcode","content":" Leetcode 371 # Sum of Two Integers # Problem Statement:\nGiven two integers a and b, return the sum of the two integers without using the operators + and -.\nLogic: # We would be treating a and b in binary form for understanding bit operations. First bit of sum calculated by xor(0^1, 1^0, 0^0, 1^1), but for the addition such as 1+1 = 10 we must have some carry, which can be found by \u0026amp; operator between the two numbers. Also note that this approach takes count into the 3 bit addition in case of carry (1^1^1=1 and 1\u0026amp;1\u0026amp;1 = 1).\nWe proceed as follows\nprocedure ADD(a, b): if a: carry = a AND b sum = a XOR b return ADD(carry \u0026lt;\u0026lt; 1, sum) else: return sum Code # class Solution { // Working c++ code public: int getSum(int a, int b) { if (a) return getSum((a \u0026amp; b) \u0026lt;\u0026lt; 1, a ^ b); return b; } }; Time Complexity # O(log(max(a, b))) where \u0026ldquo;log\u0026rdquo; is the logarithm base 2. This is because in each recursive call, the size of the input (represented by the maximum of \u0026lsquo;a\u0026rsquo; and \u0026lsquo;b\u0026rsquo;) is reduced by half due to the left shift (carry \u0026laquo; 1).\nSpace Complexity # O(log(max(a,b))) This is because each recursive call consumes space on the call stack, and the maximum depth of the recursion is determined by the number of bits needed to represent the larger of the two numbers, \u0026lsquo;a\u0026rsquo; or \u0026lsquo;b\u0026rsquo;.\n"},{"id":2,"href":"/docs/lc/8/","title":"8. String to Integer","section":"Leetcode","content":" 8. String to Integer # Problem Statement # Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++\u0026#39;s atoi function). The algorithm for myAtoi(string s) is as follows: Read in and ignore any leading whitespace. Check if the next character (if not already at the end of the string) is \u0026#39;-\u0026#39; or \u0026#39;+\u0026#39;. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present. Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored. Convert these digits into an integer (i.e. \u0026#34;123\u0026#34; -\u0026gt; 123, \u0026#34;0032\u0026#34; -\u0026gt; 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2). If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1. Return the integer as the final result. Note: Only the space character \u0026#39; \u0026#39; is considered a whitespace character. Do not ignore any characters other than the leading whitespace or the rest of the string after the digits. Approach # Let\u0026rsquo;s break the problem into simple pieces and try to handle each piece.\nInitial Processing # Skip leading whitespaces. Identify the sign (positive or negative). Handle leading + or - only once, as any subsequent symbols are considered extraneous. Overflow Prevention # Implement a check for potential overflow: If n exceeds INT_MAX/10, it would lead to overflow. If n equals INT_MAX/10, additional digits are allowed only up to 7 to avoid overflow. Iterative Parsing # Iterate through the input until a non-digit character is encountered. Code: # #include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; int a = 1e9+7; class Solution { public: int myAtoi(string s) { int i= 0; while(s[i]==32) i+=1; int sign = 1; if(s[i]==\u0026#39;-\u0026#39;){ sign *= -1;i+=1;} else if(s[i]==\u0026#39;+\u0026#39;)i+=1; int num = 0; while(i\u0026lt;s.size() and isdigit(s[i])){ if(num\u0026gt;INT_MAX/10 or (num==INT_MAX/10 and (s[i]-\u0026#39;0\u0026#39;)\u0026gt;7)) return sign==1?INT_MAX:INT_MIN; else{ num = num*10+(s[i]-\u0026#39;0\u0026#39;); } i+=1; } return num*sign; } }; Time Complexity # O(n)- where n is the length of the input string s.\nSpace Complexity # O(1)- constant space, as only the variables are used and don\u0026rsquo;t scale to the size of the input.\nThanks! Have a nice day!!ðŸ˜‰\n"}]