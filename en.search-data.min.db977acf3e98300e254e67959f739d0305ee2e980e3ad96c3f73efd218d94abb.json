[{"id":0,"href":"/docs/first_one/","title":"About Me","section":"Docs","content":" Greetings! ðŸ‘‹ # Introduction # Greetings, I\u0026rsquo;m Harpreet Singh, a Computer Science major at IIITH, finished my third semester. Having recently completed courses like CS3.301 (Operating Systems and Networks) and CS1.302 (Automata Theory), I find myself intrigued by the practical applications of Computer Science. Witnessing theories come to life in computer systems and algorithms has been truly captivating.\nWhat to Expect. # As someone with dynamic interests, my focus shifts based on current happenings. Primarily, my curiosity centers around the developments in the field of computer science. So this is a place where I would not only share algorithms and data structure problems but also research articles in the tech domain. Rest assured, these articles won\u0026rsquo;t be your typical run-of-the-mill readsâ€”they\u0026rsquo;re designed to captivate and inspire ðŸ˜‰.\nRoad Ahead # It\u0026rsquo;s just the beginning, and I would keep updating my daily learnings, challenges, and discoveries regularly. I hope that, in turn, you find something new and interesting with each visit. I won\u0026rsquo;t fail the people who give their extremely valuable time and attention on this page!\nThank you for stopping by, see you on the first post!\n#StayCurious ðŸš€\n"},{"id":1,"href":"/docs/lc/getsum/","title":"Get Sum","section":"Leetcode","content":" Leetcode 371 # Sum of Two Integers # Problem Statement:\nGiven two integers a and b, return the sum of the two integers without using the operators + and -.\nLogic: We would be treating a and b in binary form for understanding bit operations. First bit of sum calculated by xor(0^1, 1^0, 0^0, 1^1), but for the addition such as 1+1 = 10 we must have some carry, which can be found by \u0026amp; operator between the two numbers. Also note that this approach takes count into the 3 bit addition in case of carry (1^1^1=1 and 1\u0026amp;1\u0026amp;1 = 1). We proceed as follows\nprocedure ADD(a, b): if a: carry = a AND b sum = a XOR b return ADD(carry \u0026lt;\u0026lt; 1, sum) else: return sum Time Complexity: O(log(max(a, b))) where \u0026ldquo;log\u0026rdquo; is the logarithm base 2. This is because in each recursive call, the size of the input (represented by the maximum of \u0026lsquo;a\u0026rsquo; and \u0026lsquo;b\u0026rsquo;) is reduced by half due to the left shift (carry \u0026laquo; 1).\nSpace Complexity: O(log(max(a,b))) This is because each recursive call consumes space on the call stack, and the maximum depth of the recursion is determined by the number of bits needed to represent the larger of the two numbers, \u0026lsquo;a\u0026rsquo; or \u0026lsquo;b\u0026rsquo;.\nclass Solution { // Working c++ code public: int getSum(int a, int b) { if (a) return getSum((a \u0026amp; b) \u0026lt;\u0026lt; 1, a ^ b); return b; } }; "}]